<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

// ReSharper disable RedundantDelegateCreation

namespace GosuParser
{
    public static partial class Parser
    {
        // applyP <*>
        public static Parser<TResult> Apply<T1, TResult>(this Parser<Func<T1, TResult>> funcParser, Parser<T1> xParser) =>
            from func in funcParser
            from x in xParser
            select func(x);
        <#
        for(var i = 1; i < 8; i++) {
            var typeParams = string.Join(", ", Enumerable.Range(2, i).Select(x => "T" + x));
            var funcParams = string.Join(", ", Enumerable.Range(2, i).Select(x => "t" + x));
        #>

        public static Parser<Func<<#= typeParams #>, TResult>> Apply<T1, <#= typeParams #>, TResult>(this Parser<Func<T1, <#= typeParams #>, TResult>> funcParser, Parser<T1> xParser) =>
            from func in funcParser
            from x in xParser
            select new Func<<#= typeParams #>, TResult>((<#= funcParams #>) => func(x, <#= funcParams #>));
        <# } #>

    }
}